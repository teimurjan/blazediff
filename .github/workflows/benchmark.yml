name: Benchmark

on:
  push:
    branches:
      - main
    paths:
      - "packages/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - ".github/workflows/benchmark.yml"

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Setup wasm-pack
        run: cargo install wasm-pack

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Run Benchmark (blazediff)
        run: pnpm benchmark:blazediff -- --format=json --output=blazediff.json

      - name: Run Benchmark (pixelmatch)
        run: pnpm benchmark:pixelmatch -- --format=json --output=pixelmatch.json

      - name: Compare and Print Combined Markdown Table (algorithm)
        if: always()
        run: |
          node -e '
            const fs = require("fs");
            const a = JSON.parse(fs.readFileSync("packages/benchmark/pixelmatch.json", "utf8"));
            const b = JSON.parse(fs.readFileSync("packages/benchmark/blazediff.json", "utf8"));
            const byName = new Map(b.map(r => [r.name, r]));
            const rows = [];
            for (const r of a) {
              const m = byName.get(r.name);
              if (!m) continue;
              const px = r.average;
              const bz = m.average;
              const saved = px - bz;
              const pct = px ? (saved / px) * 100 : 0;
              rows.push([r.name, `${px.toFixed(2)}ms`, `${bz.toFixed(2)}ms`, `${saved.toFixed(2)}ms`, `${pct.toFixed(1)}%`]);
            }
            rows.sort((x,y)=> x[0].localeCompare(y[0]));
            const sum = (arr) => arr.reduce((s, v) => s + v, 0);
            const pxTotal = sum(a.map(x=>x.average));
            const bzTotal = sum(b.map(x=>x.average));
            const savedTotal = pxTotal - bzTotal;
            const pctTotal = pxTotal ? (savedTotal / pxTotal) * 100 : 0;
            const head = ["Benchmark","Pixelmatch","BlazeDiff","Time Saved","% Improvement"];
            const header = `| ${head.join(" | ")} |`;
            const sep = `| ${head.map(()=>"---").join(" | ")} |`;
            const lines = rows.map(r => `| ${r.join(" | ")} |`);
            lines.push(`| **TOTAL** | **${pxTotal.toFixed(2)}ms** | **${bzTotal.toFixed(2)}ms** | **${savedTotal.toFixed(2)}ms** | **${pctTotal.toFixed(1)}%** |`);
            console.log([header, sep, ...lines].join("\n"));
          '

      - name: Run Benchmark (blazediff binary)
        run: pnpm benchmark:blazediff:binary -- --format=json --output=blazediff_binary.json

      - name: Run Benchmark (pixelmatch binary)
        run: pnpm benchmark:pixelmatch:binary -- --format=json --output=pixelmatch_binary.json

      - name: Compare and Print Combined Markdown Table (binary)
        if: always()
        run: |
          node -e '
            const fs = require("fs");
            const a = JSON.parse(fs.readFileSync("packages/benchmark/pixelmatch_binary.json", "utf8"));
            const b = JSON.parse(fs.readFileSync("packages/benchmark/blazediff_binary.json", "utf8"));
            const byName = new Map(b.map(r => [r.name, r]));
            const rows = [];
            for (const r of a) {
              const m = byName.get(r.name);
              if (!m) continue;
              const px = r.average;
              const bz = m.average;
              const saved = px - bz;
              const pct = px ? (saved / px) * 100 : 0;
              rows.push([r.name, `${px.toFixed(2)}ms`, `${bz.toFixed(2)}ms`, `${saved.toFixed(2)}ms`, `${pct.toFixed(1)}%`]);
            }
            rows.sort((x,y)=> x[0].localeCompare(y[0]));
            const sum = (arr) => arr.reduce((s, v) => s + v, 0);
            const pxTotal = sum(a.map(x=>x.average));
            const bzTotal = sum(b.map(x=>x.average));
            const savedTotal = pxTotal - bzTotal;
            const pctTotal = pxTotal ? (savedTotal / pxTotal) * 100 : 0;
            const head = ["Benchmark","Pixelmatch","BlazeDiff","Time Saved","% Improvement"];
            const header = `| ${head.join(" | ")} |`;
            const sep = `| ${head.map(()=>"---").join(" | ")} |`;
            const lines = rows.map(r => `| ${r.join(" | ")} |`);
            lines.push(`| **TOTAL** | **${pxTotal.toFixed(2)}ms** | **${bzTotal.toFixed(2)}ms** | **${savedTotal.toFixed(2)}ms** | **${pctTotal.toFixed(1)}%** |`);
            console.log([header, sep, ...lines].join("\n"));
          '
